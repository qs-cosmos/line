# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
#[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
# Set git branch

# function parse_git_dirty {
#   [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit, working directory clean" ]] && echo "*"
# }
#
# function parse_git_branch {
#   git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/ \(\1$(parse_git_dirty)\) /"
# }
function parse_git_branch {
    ref=$(git symbolic-ref HEAD 2> /dev/null) || return ;
    echo "("${ref#refs/heads/}$(parse_git_dirty)")";
}

function parse_git_dirty {
    local status=$(git status -s 2> /dev/null | tail -n1)
    # local empty_1="nothing to commit, working tree clean"
    # local empty_2='nothing to commit (create/copy files and use "git add" to track)'

    # [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit, working tree clean" ]] && echo "*"
    # [[ $status != $empty_1 ]] && [[ $status != $empty_2 ]] && echo "*"
    [[ -n $status ]] && echo "*"
}

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[00;32m\]\u@\h\[\033[00m\]:\[\033[00;34m\]\w\[\033[00;36m\]$(parse_git_branch)\[\033[00m\]\n\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    #alias fgrep='fgrep --color=auto'
    #alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
#alias ll='ls -l'
#alias la='ls -A'
#alias l='ls -CF'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi


# Set alias
alias l='ls -l'
alias ll='ls -al'

# Set nvm
# export NVM_DIR=$(realpath "$HOME/.nvm")
# This loads nvm
# [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
# This loads nvm bash_completion
# [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# export https_proxy=10.110.216.52:3128
# export http_proxy=10.110.216.52:3128

# Set nodejs 8.1.4
# nvm use --delete-prefix v8.13.0 &>/dev/null

# PATH
# export PATH=$HOME/.local/bin:$PATH

# Repos Runtime Tools
# export RUNTIME_ROOT=$HOME/repos/toutiao
# export PATH=$RUNTIME_ROOT/runtime:$PATH

# EXTEND_COMMAND
# export EXTEND_COMMAND=$HOME/.extend_command
# export PATH=$EXTEND_COMMAND/scripts:$EXTEND_COMMAND/temp:$PATH

# Tree Command
# export PATH=$EXTEND_COMMAND/tree-1.7.0:$PATH

# eslint
# export ESLINT_HOME=$EXTEND_COMMAND/eslint_v_5.1.0/
# export PATH=$ESLINT_HOME/node_modules/.bin/:$PATH

# PYTHONPATH
# export PYTHONPATH=$HOME/repos:$HOME/repos/pyutil:$HOME/repos/ss_thrift_gen
# export PYTHONPATH=$RUNTIME_ROOT/app/content/lib:$RUNTIME_ROOT/lib:$PYTHONPATH

#  Commonly Used Directory
# export content=$RUNTIME_ROOT/app/content
# export temp=$HOME/temp
# export toutiao=$RUNTIME_ROOT
# export pecker=$RUNTIME_ROOT/app/content/pecker
# export vim_plugs=$HOME/.vim/plugged
# export extend_scripts=$HOME/.extend_command/scripts

# Commonly Used Configure File
# export bashrc=$HOME/.bashrc
# export vimrc=$HOME/.vimrc

# JAVA
# export JAVA_HOME=/data00/tiger/jdk/jdk1.8.0_131
# export JRE_HOME=$JAVA_HOME/jre
# export CLASSPATH=.:$CLASSPATH:$JAVA_HOME/lib:$JRE_HOME/lib
# export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin

# QT
export QT_BASE=/home/qingsong/program/qt/5.12.0/5.12.0/gcc_64/
export PATH=$QT_BASE/bin:$PATH
export MANPATH=$QT_BASE/man:$MANPATH
export LD_LIBRARY_PATH=$QT_BASE/lib:$LD_LIBRARY_PATH
